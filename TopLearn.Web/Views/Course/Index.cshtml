@model ShowCoursesListViewModel
@{
    IEnumerable<CourseGroup> groups = ViewData["Groups"] as IEnumerable<CourseGroup>;
    IEnumerable<int> selectedGroups = ViewData["SelectedGroups"] as IEnumerable<int>;
}
@{
    ViewData["Title"] = "";
}

<div class="container">
    <nav aria-label="breadcrumb">
        <ul class="breadcrumb">
            <li class="breadcrumb-item"><a href="/">تاپ لرن</a></li>
            <li class="breadcrumb-item active"><a href="/courses">دوره ها</a></li>
            <li class="breadcrumb-item active" aria-current="page"> برنامه نویسی وب </li>
        </ul>
    </nav>
</div>

<div class="container">
    <form action="/courses" method="get">

        <input type="hidden" id="pageId" name="pageId" value="@ViewData["PageId"].ToString()" />

        <section class="term-categories">

            <div class="top-bar">

                <header>
                    <h1>
                        دوره های <span> برنامه نویسی وب </span>
                    </h1>
                    <span> @Model.Courses.Count() دوره </span>
                </header>

                <div class="row">
                    <div class="col-md-4 col-sm-12 col-xs-12 pull-right">
                        <div class="input">
                            <input type="text" name="filter" placeholder="موضوع مورد نظر ...">
                            <button><i class="zmdi zmdi-search"></i></button>
                        </div>
                    </div>
                    <div class="col-md-4 col-sm-6 col-xs-12 pull-right">
                        <div class="switch-field available">
                            <input onclick="filterCourses()" id="available-filter-1" name="getType" value="all" type="radio" @(ViewData["GetType"] == "all" ? "checked" : "")>
                            <label for="available-filter-1"> همه </label>
                            <input onclick="filterCourses()" id="available-filter-2" name="getType" value="buyable" type="radio" @(ViewData["GetType"] == "buyable" ? "checked" : "")>
                            <label for="available-filter-2"> خریدنی </label>
                            <input onclick="filterCourses()" id="available-filter-3" name="getType" value="free" type="radio" @(ViewData["GetType"] == "free" ? "checked" : "")>
                            <label for="available-filter-3"> رایگان </label>
                        </div>
                    </div>
                    <div class="col-md-4 col-sm-6 col-xs-12 pull-left">
                        <div class="select-ddl">
                            <select name="orderBy">
                                <option value="createDate"> تاریخ انتشار </option>
                                <option value="updateDate"> تاریخ به روز رسانی </option>
                            </select>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">

                <aside class="col-lg-3 col-md-4 col-sm-12 col-xs-12">

                    <section class="aside-section filter-by-price">
                        <header><h3> فیلتر بر اساس قیمت </h3></header>
                        <div class="price-range">
                            <input type="hidden" value="" id="min-value" name="minPrice">
                            <input type="hidden" value="" id="max-value" name="maxPrice">
                            <div class="price-bar"><div id="priceFilter"></div></div>
                            <div class="max-price">تا <span id="max-text">@Model.Courses.OrderByDescending(c => c.Price).First().Price</span> تومان</div>
                            <div class="min-price">از <span id="min-text">@Model.Courses.OrderBy(c => c.Price).First().Price</span> تومان</div>
                            <div class="clearfix"></div>
                        </div>
                    </section>

                    <section class="aside-section filter-by-category">
                        <header><h3> دسته بندی موضوعات </h3></header>
                        <div class="inner">
                            <ul>
                                @foreach (CourseGroup group in groups.Where(g => g.ParentId == null))
                                {
                                    <li>

                                        <label>
                                            <input @(selectedGroups != null && selectedGroups.Any(g => g == group.Id) ? "checked" : "") onchange="filterCourses()" type="checkbox" name="selectedGroups" value="@group.Id">
                                            @group.Title
                                        </label>
                                    </li>

                                    @if (groups.Any(g => g.ParentId == group.Id))
                                    {
                                        <ul>
                                            @foreach (CourseGroup subGroup in groups.Where(g => g.ParentId == group.Id))
                                            {
                                                <li>

                                                    <label>
                                                        <input @(selectedGroups != null && selectedGroups.Any(sg => sg == subGroup.Id) ? "checked" : "") onchange="filterCourses()" type="checkbox" name="selectedGroups" value="@subGroup.Id">
                                                        @subGroup.Title
                                                    </label>
                                                </li>
                                            }
                                        </ul>
                                    }
                                }

                            </ul>
                        </div>
                    </section>

                </aside>

                <div class="col-lg-9 col-md-8 col-sm-12 col-xs-12">

                    <section class="terms-items">
                        <div class="row">
                            @foreach (var course in Model.Courses)
                            {
                                <partial name="_CourseBox" model="course"></partial>
                            }
                        </div>


                        <nav aria-label="Page navigation">
                            <ul class="pagination justify-content-center">
                                <li class="page-item @(!Model.HasPreviousPage ? "disabled" : "")">
                                    <a class="page-link" onclick="changePage(@ViewData["PageId"] - 1)" href="#" aria-label="Previous">
                                        <span aria-hidden="true"><i class="zmdi zmdi-chevron-right"></i></span>
                                    </a>
                                </li>
                                @for (int i = 1; i <= Model.PageCount; i++)
                                {
                                    <li class="page-item"><a class="page-link" onclick="changePage(@i)" href="#">@i</a></li>
                                }
                                <li class="page-item @(!Model.HasNextPage ? "disabled" : "")">
                                    <a class="page-link" onclick="changePage(@ViewData["PageId"] + 1)" href="#" aria-label="Next">
                                        <span aria-hidden="true"><i class="zmdi zmdi-chevron-left"></i></span>
                                    </a>
                                </li>
                            </ul>
                        </nav>

                    </section>

                </div>
            </div>
        </section>
    </form>
</div>

@section Scripts {
    <script src="/noUiSlider/nouislider.min.js"></script>
    <script>

        function changePage(pageId) {
            $('#pageId').val(pageId);
            filterCourses();
        }

        function filterCourses() {
            $("form").submit();
        }

        $(function () {

            var slider = document.getElementById('priceFilter');
            noUiSlider.create(slider, {
                start: [20000, 100000],
                step: 5000,
                connect: true,
                direction: 'rtl',
                range: {
                    'min': 20000,
                    'max': 100000
                }
            });

            var marginMin = document.getElementById('min-text'),
                marginMax = document.getElementById('max-text');

            slider.noUiSlider.on('update', function (values, handle) {
                var xvalue = Math.round(values[handle]);
                if (handle) {
                    marginMax.innerHTML = xvalue;
                } else {
                    marginMin.innerHTML = xvalue;
                }
                //console.log(values[handle]);
            });

            slider.noUiSlider.on('change', function (values, handle) {
                var xvalue = Math.round(values[handle]);
                if (handle) {
                    // setGetParameter('max_price', xvalue);
                    $('#max-value').val(xvalue);
                } else {
                    // setGetParameter('min_price', xvalue);
                    $('#min-value').val(xvalue);
                }
            });


            slider.noUiSlider.on('slide', function (values, handle) {

                console.log(values[0]);
                console.log(values[1]);

                var xvalue = Math.round(values[handle]);
                //updateSliderRange( Math.round(values[0]), Math.round(values[1]) );
            });


            function updateSliderRange(min, max) {
                slider.noUiSlider.updateOptions({
                    range: {
                        'min': min,
                        'max': max
                    }
                });
            }


        });


    </script>
}
